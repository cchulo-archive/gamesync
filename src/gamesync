#!/usr/bin/env bash

# shellcheck disable=SC2145
# shellcheck disable=SC2068
# shellcheck disable=SC1090

if [[ -f /usr/local/lib/gamesync/gamesync-logging ]]; then
  GAMESYNC_LOGGING="/usr/local/lib/gamesync/gamesync-logging"
  GAMESYNC_UTILITIES="/usr/local/lib/gamesync/gamesync-utilities"
  GAMESYNC_PY="/usr/local/lib/gamesync/gamesync.py"
else
  GAMESYNC_LOGGING="${HOME}/.local/lib/gamesync/gamesync-logging"
  GAMESYNC_UTILITIES="${HOME}/.local/lib/gamesync/gamesync-utilities"
  GAMESYNC_PY="${HOME}/.local/lib/gamesync/gamesync.py"
fi

# source any dependencies
source "${GAMESYNC_LOGGING}"
source "${GAMESYNC_UTILITIES}"

OPTIONS=$(getopt -o h,a: --long help,alias: -n "$0" -- "$@")
if [ $? -ne 0 ]; then
  exit 1
fi

eval set -- "${OPTIONS}"

help() {
  cat <<-EOF
  Description: Process wrapper to add back save support for Steam/Non-Steam games
  Usage:
    ${0} "command"
    ${0} [options] -- "command"

  Options:
    -h | --help  )    Displays this dialog
    -a | --alias )    Used to identify a non-steam game. Useful in case the executable name is not useful
                      or the command is in a format that is not easily parsable by gamesync
EOF
}

alias=
while true; do
  case "$1" in
    -h | --help)
      help
      exit 0
      ;;
    -a | --alias)
      alias=$2
      shift 2
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

set -e -o pipefail

# Load environment variables from ~/.local/share/gamesync/gamesync.env
while IFS='=' read -r key value; do
  if [[ -n ${key} ]]; then
    export "$key"="$value"
  fi
done < ~/.local/share/gamesync/gamesync.env

# Logging starts working here

log_debug "Environment:"
log_debug "$(env)"

# gamesync can be executed outside of steam, if so, assign SteamAppId to 0
if [[ -z ${SteamAppId} ]]; then
  log_debug "Assigning SteamAppId to 0, this can happen is gamesync is used outside of steam"
  SteamAppId="0"
fi

log_info "Syncing saves before executing $@"

# shellcheck disable=SC2154
log_info "Steam app id: ${SteamAppId}"

if [[ -n "${alias}" ]]; then
  log_info "Alias name: ${alias}"
fi

log_info "Checking if syncthing is running..."

log_debug "Before LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"

LD_LIBRARY_PATH="" check_syncthing "${SYNCTHING_API}" "${SYNCTHING_URL}" "${SYNCTHING_FOLDER_ID}"
syncthing_status=$?

log_debug "After LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}"

if [[ "${syncthing_status}" = "${SYNCTHING_ERR_NO_CONNECTION}" ]]; then
  log_error "Timed out waiting for for syncthing to synchronize, try again later"
  exit "${SYNCTHING_ERR_NO_CONNECTION}"
elif [[ "${syncthing_status}" = "${SYNCTHING_ERR_FETCH_STATUS}" ]]; then
  log_error "Could not retrieve status from syncthing"
  exit "${SYNCTHING_ERR_FETCH_STATUS}"
elif [[ ! "${syncthing_status}" = "0"  ]]; then
  log_warning "Syncthing is not working, check the logs!"
  log_warning "Syncthing status code: ${syncthing_status}"
  log_warning "Continuing with synchronizing from ~/.local/share/gamesync/saves anyway"
else
  log_info "Syncthing is up"
fi

log_info "Downloading game saves from the staging area..."

${GAMESYNC_PY} \
  --steamAppId "${SteamAppId}" \
  --alias "${alias}" \
  --download

set +e +o pipefail

log_info "executing game!"

eval "env LD_PRELOAD=\"${LD_PRELOAD}\" $@"

log_info "done! Staging updated saves for upload..."

${GAMESYNC_PY} \
  --steamAppId "${SteamAppId}" \
  --alias "${alias}" \
  --upload

#!/usr/bin/env bash

# This file is not meant to be executed instead the bash script gamesync will source it
# so it can make use of these functions at the appropriate times

# shellcheck disable=SC1090

if [[ -f /usr/local/lib/gamesync/gamesync-logging ]]; then
  GAMESYNC_LOGGING="/usr/local/lib/gamesync/gamesync-logging"
else
  GAMESYNC_LOGGING="${HOME}/.local/lib/gamesync/scripts/gamesync-logging"
fi

source "${GAMESYNC_LOGGING}"

check_syncthing() {
  local SYNCTHING_API="$1"
  local SYNCTHING_URL="$2"
  local SYNCTHING_FOLDER_ID="$3"
  local TIMEOUT=60
  local start_time
  start_time=$(date +%s)
  local endpoint
  endpoint="${SYNCTHING_URL}/rest/db/completion?folder=${SYNCTHING_FOLDER_ID}"

  log_info "Attempting to ping ${endpoint}"

  while true; do
    local response
    response=$(curl -s -H "X-API-Key: ${SYNCTHING_API}" -X GET "${endpoint}" || echo "no connection")

    if [[ ${response} = "no connection" ]]; then
      log_fatal "Connection to ${endpoint} could not be established, is ${SYNCTHING_URL} correct?"
      return 5
    fi

    if [[ ${response} = "no such folder" ]]; then
      log_fatal "The SYNCTHING_FOLDER_ID ${SYNCTHING_FOLDER_ID} does not exist! Did you forget to set it up?"
      return 4
    fi

    local sync_status
    sync_status=$(echo "${response}" | grep -o '"completion": [0-9]*\(\.[0-9]\+\)\?' | cut -d ' ' -f 2)

    if [[ -z "${sync_status}" ]]; then
      log_fatal "Error retrieving status from ${endpoint}"
      return 2
    fi

    if [[ "${sync_status}" = "Not Authorized" ]]; then
      log_fatal "Invalid API key used"
      return 3
    fi

    if [ "${sync_status}" = "100" ]; then
      log_info "Folder is completely synchronized."
      return 0
    fi

    local current_time
    current_time=$(date +%s)
    local elapsed_time=$((current_time - start_time))
    if [ $elapsed_time -ge $TIMEOUT ]; then
      log_error "Timeout reached. Folder synchronization did not complete."
      return 5
    fi

    sleep 1
  done
}

